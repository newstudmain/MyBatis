<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="SimpleDemo.dao.EmpDynamicMapper">
  
  	<!-- 查询员工，携带哪个字段，查询条件就拼上哪个字段 -->
  	<!-- public List<Emp> getEmpByConditionIf(Emp emp); -->
  	<select id="getEmpByConditionIf" resultType="SimpleDemo.bean.Emp">
	  	SELECT id,last_name,first_name,salary,start_date
	  	FROM s_emp
	  	<!-- WHERE 使用where标签注释WHERE-->  
	  	<!-- if test:判断表达式(OGNL)
	  			参照官方文档 对应EL表达式 c:if test
	  			 
	  		从参数中取值进行判断
	  		遇见特殊符号 应该去写转义字符 "" &&
	  	-->
	  	<!-- 查询时如果没有某些条件，如没有id，会使sql拼装有问题 ...where and ... 
	  			解决：
	  				1. where 语句 后构造 1=1 	如：where 1=1 and ...
	  				        此时所有的if 条件都可以 在语句前加 and
	  				2. 使用where标签，mybatis会将 where标签中拼装的sql，多出来的and或or自动除去
	  				        只会去掉第一个多出来的and或or 如：[and] last_name like #{lastName}
	  				        如果 and 位于句末 ，last_name like #{lastName} and ,则无效。     
	  	-->
	  	<where>
		  	<if test="id!=null">
		  		id =#{id}
		  	</if>
		  	<if test="lastName!=null and lastName!=''">
		  		and last_name like #{lastName}
		  	</if>
		  	<if test="firstName!=null and firstName!=''">
		  		and first_name like #{firstName}
		  	</if>
		  	<if test="salary!=null and salary!=''">
		  		and salary =#{salary}
		  	</if>
		  	<if test="startDate!=null and startDate!=''">
		  		and start_date=#{startDate}
		  	</if>
	  	</where>
  	</select>
  	
  	<!-- public List<Emp> getEmpByConditionTrim(Emp emp); -->
  	<!-- trim标签自定义截取：
		  		prefix: 前缀 trim便签中是整个字符串拼串后的结果。（给整个字符串加一个前缀）
		  		suffix: 后缀 （给整个字符串加一个后缀）
		  		prefixOverrides: 去掉整个字符串前面多余的字符
		  		suffixOverrides: 去掉整个字符串后面多余的字符
  	 -->
  	<select id="getEmpByConditionTrim" resultType="SimpleDemo.bean.Emp">
  		SELECT id,last_name,first_name,salary,start_date
	  	FROM s_emp
	  	
  		<trim prefix="where" suffixOverrides="and">
  			<if test="id!=null">
		  		id =#{id} and
		  	</if>
		  	<if test="lastName!=null and lastName!=''">
		  		last_name like #{lastName} and
		  	</if>
		  	<if test="firstName!=null and firstName!=''">
		  		first_name like #{firstName} and 
		  	</if>
		  	<if test="salary!=null and salary!=''">
		  		salary =#{salary} and 
		  	</if>
		  	<if test="startDate!=null and startDate!=''">
		  		and start_date=#{startDate}
		  	</if>
  		</trim>
  	</select>
  
  	<!-- 
  		choose: (when...otherwise) 分支选择 相当于：switch...case
  		如果带了 id 就用 id 查，如果带了 lastname 就用lastname 查，只会进入其中一个
  	 -->
  	 <!-- public List<Emp> getEmpByConditionChoose(Emp emp); -->
  	 <select id="getEmpByConditionChoose" resultType="SimpleDemo.bean.Emp">
  	 	SELECT id,last_name,first_name,salary,start_date
	  	FROM s_emp
	  	<where>
	  		<!-- 如果带了 id 就用 id 查，如果带了 lastname 就用lastname 查，只会进入其中一个 -->
	  		<choose>
	  			<when test="id!=null">
	  				id=#{id}
	  			</when>
	  			<when test="lastName!=null">
	  				lase_name=#{lastName}
	  			</when>
	  			<when test="firstName!=null">
	  				first_name=#{firstName}
	  			</when>
	  			<when test="salary!=null">
	  				salary=#{salary}
	  			</when>
	  			<when test="startDate!=null">
	  				start_date=#{startDate}
	  			</when>
	  		</choose>
	  	</where>
  	 </select>
  	 
  	 <!-- 
  	 	set 标签，封装修改条件
  	 	public void getEmpByConditionSet(Emp emp);
  	  -->
	<update id="getEmpByConditionSet">
		update s_emp
		<!-- set -->
		<!-- set id,last_name,first_name,salary,start_date -->
		<set><!-- 加上set标签可以去除多余的,号 ，此时替换了set关键字-->
			<if test="lastName!=null">
				last_name=#{lastName},	
			</if>
			<if test="firstName!=null">
				first_name=#{firstName},	
			</if>
			<if test="salary!=null">
				salary=#{salary},	
			</if>
			<if test="startDate!=null">
				start_date=#{startDate},	
			</if>
		</set>
		where id =#{id}
	</update>
	
	<!-- 
  	 	trim 标签，封装修改条件
  	 	public void getEmpByConditionSet_Trim(Emp emp);
  	  -->
	<update id="getEmpByConditionSet_Trim">
		update s_emp
		<!-- set  -->
		<trim prefix="SET" suffixOverrides=",">
			<if test="lastName!=null">
				last_name=#{lastName},	
			</if>
			<if test="firstName!=null">
				first_name=#{firstName},	
			</if>
			<if test="salary!=null">
				salary=#{salary},	
			</if>
			<if test="startDate!=null">
				start_date=#{startDate},	
			</if>
		</trim>
		where id =#{id}
	</update>
	
	<!-- 
		
		collection: 指定要遍历的集合，list类型的参数会特殊处理，封装在map 中，map的key 就叫list
						public List<Emp> getEmpByConditionForeach(@Param("fils")List<Integer> flis);
						Parameter 'list' not found. Available parameters are [fils, param1]
					默认：list，collection
		item:	          将当前遍历出的元素赋值给指定的变量
		separator:  每个元素之间的分隔符
		open:		遍历出的所有结果拼接一个开始字符
		close:		遍历出的所有结果拼接一个结束字符
		index:		索引，遍历list的时候是索引，item时当前值。遍历map的时候是key，item时当前value。
	 -->
	 <!-- public List<Emp> getEmpByConditionForeach(List<Integer> flis); -->
	<select id="getEmpByConditionForeach" resultType="SimpleDemo.bean.Emp">
		SELECT id,last_name,first_name,salary,start_date
	  	FROM s_emp
		<foreach collection="fils" item="item_id" separator="," open="WHERE id in(" close=")">
			#{item_id}
		</foreach>
	</select>
	
	<!-- 批量保存 
		注意mysql和oracle的批量insert操作的不同
		oracle
				1.采用union all拼接查询方式
					insert into pager (PAG_ID,PAG_PARENT,PAG_NAME,PAG_ACTIVE)
			          		  select 8000,0,'Multi 8000',1 from dual
					union all select 8001,0,'Multi 8001',1 from dual
				2.采用insert all的方式
					insert all 
					into test_insert(user_name,address) values('aaa','henan')
					into test_insert(user_name,address) values('bbb','shanghai')
					into test_insert(user_name,address) values('ccc','beijing')
					select * from dual;
		mysql
				insert into s_emp(id,last_name,first_name,salary,start_date) 
				values (,,,),(,,,),(,,,);
	-->
	<!-- public void addEmps(@Param("emps")List<Emp> emps) -->
	<insert id="addEmps">
		insert all 
		<foreach collection="emps" item="emp">
			into s_emp(id,last_name,first_name,salary,start_date) 
			values
			(#{emp.id},#{emp.lastName},#{emp.firstName},#{emp.salary},#{emp.startDate})
		</foreach>
		select * from dual
	</insert>
	
	<!-- 
		两个内置参数
			不只是方法传递过来的参数可以用来判断，取值
			Mybatis还有两个内置参数：
				_parameter: 代表整个参数
					单个参数:_parameter代表的就是这个参数
					多个参数:多个参数会被封装成一个map，__parameter就代表这个map
				_databaseId: 
					如果配置了_databaseIdProProvider标签，
					_databaseId就代表当前数据库的别名oracle
	 -->
	 <!-- public List<Emp> getEmpInnerparameter(Emp emp); -->
	 <select id="getEmpInnerparameter" resultType="SimpleDemo.bean.Emp">
	 
	 	<!-- bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
	 	<bind name="_lastName" value="'%'+lastName+'%'"/>
	 	
	 	<if test="_databaseId=='mysql'">
		 	SELECT id,last_name,first_name,salary,start_date
		  	FROM s_emp
		  	<if test="_parameter!=null">
		  		WHERE last_name = #{_parameter.lastName}
		  	</if>
	 	</if>
	 	<if test="_databaseId=='oracle'">
		 	SELECT id,last_name,first_name,salary,start_date
		  	FROM s_emp
		  	<if test="_parameter!=null">
		  		WHERE last_name like #{_lastName}
		  	</if>
	 	</if>
	 </select>
	 
	 <!-- 抽取可重用的sql片段 
	 		 Sql中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的
	 		 include标签中也可以用property标签,用以指定自定义属性。在sql标签中通过${}取出对应的属性值。
	 -->
	 <sql id="selectColumn">
	 	<if test="_databaseId=='oracle'">
	 		id,last_name,first_name,salary,start_date
	 	</if>
	 </sql>
	 
	 <!-- public List<Emp> getEmpSQL(); -->
	 <select id="getEmpSQL" resultType="SimpleDemo.bean.Emp">
	 	SELECT 
	 	<include refid="selectColumn"></include>
	 	FROM s_emp
	 </select>
  </mapper>